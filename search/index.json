[{"content":" This blog is about Go by examples.\n ","href":"/","title":"Home"},{"content":"","href":"/project/","title":"My Projects"},{"content":"","href":"/docs/","title":"My Posts"},{"content":"Hello, I\u0026rsquo;m Tracey. I am a self-taught software engineer with applied mathematics background. After going through A Tour of Go, I found that Go was actually a neat and simple language to learn and started to develop more interest in programming. While still in my learning journey, I create this blog to share interesting problems and projects that I have done in Go, as well as some other useful resources.\nHope you like the blog and happy Go-ing!\n","href":"/about/","title":"About"},{"content":"Courses  A Tour of Go  Books  Cracking the Coding Interview by Gayle Laakmann McDowell  Articles  sync.RWMutex\nA nice write up of how to use sync.RWMutex to handle concurrent read/write access to shared resources.  ","href":"/resources/","title":"Resources"},{"content":"","href":"/tags/api/","title":"API"},{"content":"","href":"/authors/","title":"Authors"},{"content":"","href":"/categories/","title":"Categories"},{"content":"","href":"/categories/features/","title":"features"},{"content":"","href":"/tags/g0/","title":"g0"},{"content":"","href":"/tags/game/","title":"game"},{"content":"","href":"/tags/gcp/","title":"GCP"},{"content":"","href":"/tags/go/","title":"go"},{"content":"","href":"/tags/golang/","title":"golang"},{"content":"Source code\nDescription This simple game is modified from Flappy Gopher game from Ebiten. It is written in Go using Ebiten library.\nMira is running her scooter. She is going to meet objects on her way, and jumping over them is the only way to go pass. Every time when she successfully avoids an object she will get one point.\nHow to play Press space key or left-click when you want to jump.\nSome modifications that have been made  Changing Gopher image to Mira image. The new image is stored locally in personal github folder  localsrc \u0026#34;github.com/tracey7d4/mirajump/resources/images  Un-rotating image during jumping period Deleting upper pipes Increasing gap between two adjacent pipes Making pipes' height fixed Changing to automatically running on the ground Jumping only once at a time. Another jump can only be done as long as Mira is on the ground.  ","href":"/project/mirajump/","title":"Mira Jump"},{"content":"","href":"/tags/project/","title":"project"},{"content":"Source code\nIn this application, we will discuss about stockbot that returns stock prices of a company. The architecture is as follows.\nFor one who comes to this repository first, I have another repository call weatherbot in which I have described step by step how to build a weatherbot for querying weather conditon of a location. Most of the steps of implementation for two bots are similar, including building a Slack bot user, subscribing to app mentioned event, creating a Go function which is a HTTP handler. So please refer to that application for more details. In this application, I only discuss the difference in Go function. In particular, we will have a look at getStock(), which is used to make a call out to third-party API, receive the response, extract and format the information.\nThe getQuote() is as follows.\nfunc getQuote(sym string) (string, error) { sym = strings.ToUpper(sym) fhUrl := fmt.Sprintf(\u0026#34;https://finnhub.io/api/v1/quote?symbol=%s\u0026#34;, sym) resp, err := http.Get(fhUrl) if err != nil { return \u0026#34;\u0026#34;, err } defer func(){ _ = resp.Body.Close() }() body, err := ioutil.ReadAll(resp.Body) m := make(map[string]float32) err = json.Unmarshal(body, \u0026amp;m) if err != nil { return \u0026#34;\u0026#34;, err } fhUrlForName := fmt.Sprintf(\u0026#34;https://finnhub.io/api/v1/stock/profile2?symbol=%s\u0026#34;, sym) resp, err = http.Get(fhUrlForName) if err != nil { return \u0026#34;\u0026#34;, err } defer func(){ _ = resp.Body.Close() }() body, err = ioutil.ReadAll(resp.Body) m1 := make(map[string]string) err = json.Unmarshal(body, \u0026amp;m1) if err != nil { return \u0026#34;\u0026#34;, err } var s string if len(m) == 1 { s = \u0026#34;_\u0026#34; + sym + \u0026#34; is not a valid trading name_\u0026#34; } else { s = \u0026#34;*\u0026#34; + m1[\u0026#34;name\u0026#34;] + \u0026#34; (\u0026#34; + sym + \u0026#34;) \u0026#34; + \u0026#34; Stock Price* \\n\u0026#34; + \u0026#34;_current_: $\u0026#34; + fmt.Sprintf(\u0026#34;%.2f\u0026#34;, m[\u0026#34;c\u0026#34;]) + \u0026#34;\\n\u0026#34; + \u0026#34;_high_: $\u0026#34; + fmt.Sprintf(\u0026#34;%.2f\u0026#34;, m[\u0026#34;h\u0026#34;]) + \u0026#34;\\n\u0026#34; + \u0026#34;_low_: $\u0026#34; + fmt.Sprintf(\u0026#34;%.2f\u0026#34;, m[\u0026#34;l\u0026#34;]) + \u0026#34;\\n\u0026#34; + \u0026#34;_open_: $\u0026#34; + fmt.Sprintf(\u0026#34;%.2f\u0026#34;, m[\u0026#34;o\u0026#34;]) + \u0026#34;\\n\u0026#34; + \u0026#34;_previous close_: $\u0026#34; + fmt.Sprintf(\u0026#34;%.2f\u0026#34;, m[\u0026#34;pc\u0026#34;]) + \u0026#34;\\n\u0026#34; + \u0026#34;_timestamp_: \u0026#34; + time.Now().UTC().String() } return s, nil } I use http://finnhub.io API this time for getting stock value of a company by its ticker symbol. You can find its API documentation in here.\nI also want to display the company trading name along with its ticker symbol, so I make another call for getting the company name.\nhttps://finnhub.io/api/v1/stock/profile2?symbol=\u0026lt;ticker symbol\u0026gt; Now let\u0026rsquo;s deploy our Go function\ngcloud functions deploy AppStockMentionHandler --runtime go111 --trigger-http\rWhen you see that your function has been successfully deployed, go to a Slack Channel and call your bot, remember to mention its name.\n@stockbot aapl\rHope you enjoy your bots.\nAPI reference  Stock API Documentation Weather bot repository  ","href":"/project/stockbot/","title":"Simple Slack bot in Go using event API - Stock Bot"},{"content":"","href":"/tags/slack/","title":"slack"},{"content":"","href":"/tags/","title":"Tags"},{"content":"","href":"/authors/tracey/","title":"tracey"},{"content":"Source code\nIn this repository, I\u0026rsquo;m going to create a weatherbot for querying weather condition of a given location. The idea of writing a Slack bot in Go was inspired by rapidloop\u0026rsquo;s slackbot for RTM API. At the moment, Slack platform provides a range of APIs that Slack apps can access to including events API, web API, Audit Logs APIs beside RTM API which was used in rapidloop\u0026rsquo;s implementation. As RTM API is being phased out in favour of events API, in this application, events API will be used.\nArchitecture The architecture of the application can be seen in the diagram below.\nWhen a bot is mentioned in Slack App, an event is created on Slack Event API. That event will trigger a call out to a cloud function.The cloud function was written in Go and hosted on Google Cloud Platform (GCP). The function gets the location from the request, calls out to a third-party API, which is openweathermap in this case, to get the weather information. The function then formats the final message with that information before sending it back to Slack API to display in Slack App.\nCreating such bot required the following steps\n  Build a Slack Bot User that subscribes to app_mention event\n  Create a project on GCP to deploy the cloud function.\n  Create a Go function which is a HTTP handler that responds to events triggered by Slack bot\n  Implementation   Build a Slack Bot User\nIt will need a Slack workspace as well to deploy the bot. So either an existing workspace or a new one is required. In Slack API page, let\u0026rsquo;s create a new app by clicking on the Create New App button. Next, create a Bot User for it. Invite your bot to Slack channels where you want to interact with it. Follow the link for more details about bot users and how to build one.\nWe also need to subscribe to app_mention event. This subscription allows your bot to response to users' requests that mention its name.\n  Create a project on GCP\nA GCP account is all we need to create a Project on GCP. Follow the instruction of setting up a GCP Project here.\n  Create a Go function\nThe final step is writing a Go function for your bot that will be deployed on to GCP. If you haven\u0026rsquo;t worked with GCP before, there is an example of Hello, World cloud function in the link given above, which can serve as an excellent starting point.\nOur Go function is routed with each request made to the cloud function, and a response to an incoming request will be written to the http.ResponseWriter. More details on this will be provided in a later section.\nTo make our bot respond to the request when its name is mentioned, we need to subscribe to the app_mention event.\nA. Event Subscription\nGo to Your Apps at https://api.slack.com/apps, choose the bot, go to Event Subscription configuration under Features section, then turn Enable Events to On.\nAn Event Request URL must be confirmed before subscribing to any events and saving the form. Right after you type in a URL, Slack will automatically send out an attribution that includes token, challenge, and type fields as shown in figure below. It is noted that this figure is taken from Slack usages guide. Yours will look different.\nThe requirement is that our endpoint will respond back with challenge attribute value. In other words, our function needs to catch the challenge value and send it back to Slack for the first time running. Following is the function that performs the task.\nfunc AppWeatherMentionHandler(w http.ResponseWriter, r *http.Request) { // get the request body  defer func() { _ = r.Body.Close() }() body, _ := ioutil.ReadAll(r.Body) m := make(map[string]interface{}) err := json.Unmarshal(body, \u0026amp;m) if err != nil { _, _ = fmt.Fprintf(w, \u0026#34;error unmarshalling body: %v\u0026#34;, err) return } fmt.Fprintf(w, \u0026#34;%s\u0026#34;, m[\u0026#34;challenge\u0026#34;]) } Deploy this function by following command\ngcloud functions deploy AppWeatherMentionHandler --runtime go111 --trigger-http\rAnswer y to the question about unauthenticated access. In the returning log you can see the URL that points to your newly created cloud function as an endpoint for your web service. Copy and paste this link to the Request URL panel on web Slack app till the field turned to Verified\nOnce the URL is successfully verified, click on Add Bot User Event, choose app_mention event and then save the form Save changes.\nWe have already done with subscribing an event for our bot. Now come back with our Go function for weatherbot.\nB. Slack Weather Bot\nOur Go function AppWeatherMentionHandler() is a HTTP handler that does the following tasks\n Get the city name from the JSON payload describing the event and assign it to a variable city; Call a local function getWeather() to get weather message;  get the weather from openweathermap format the return message   Call sendMessage() function to display the response in Slack channels.  In the first step, the JSON payload from Slack API will look like this.\n\u0026#34;token\u0026#34;: \u0026#34;*****************************\u0026#34;, \u0026#34;team_id\u0026#34;: \u0026#34;**************\u0026#34;, \u0026#34;api_app_id\u0026#34;: \u0026#34;********\u0026#34;, \u0026#34;event\u0026#34;: { \u0026#34;client_msg_id\u0026#34;: \u0026#34;************************\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;app_mention\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;\u0026lt;@ your bot user_ID\u0026gt; Melbourne, Au\u0026#34;, \u0026#34;user\u0026#34;: \u0026#34;************\u0026#34;, \u0026#34;ts\u0026#34;: \u0026#34;1592101177.000800\u0026#34;, .... We\u0026rsquo;re going to unmarshall this JSON into a map to extract the information of interest. Apart from the city name I also need the token and channel fields as they are required to send the message back to Slack later.\nbody, _ := ioutil.ReadAll(r.Body) m := make(map[string]interface{}) err := json.Unmarshal(body, \u0026amp;m) if err != nil { _, _ = fmt.Fprintf(w, \u0026#34;error unmarshalling body: %v\u0026#34;, err) return } m1 := m[\u0026#34;event\u0026#34;].(map[string]interface{}) text := fmt.Sprintf(\u0026#34;%v\u0026#34;, m1[\u0026#34;text\u0026#34;]) str := strings.Split(text, \u0026#34;\u0026lt;bot user ID\u0026gt;\u0026#34;) city := strings.Trim(str[1], \u0026#34; \u0026#34;) channel := fmt.Sprintf(\u0026#34;%v\u0026#34;, m1[\u0026#34;channel\u0026#34;]) token := \u0026#34;User\u0026#39;s Slack Bot Token\u0026#34; Call getWeather() with city variable as an input.\nweather, err := getWeather(city) I am using openweathermap.org API to get weather information. This API requires an appID, and all you need to do to get one is signing up an account on its website. You can check API documentation for current weather here. To get current weather of a city by name with returned values in cubic metric you need to call the following endpoint.\nhttp://api.openweathermap.org/data/2.5/weather?q=\u0026lt;city_name\u0026gt;\u0026amp;units=metric\u0026amp;APPID=\u0026lt;appID\u0026gt; If the data for that city could not be found, {\u0026quot;cod\u0026quot;:\u0026quot;404\u0026quot;,\u0026quot;message\u0026quot;:\u0026quot;city not found\u0026quot;} is returned. In this case, our bot will display City \u0026lt;city_name\u0026gt; is not found to the user. Otherwise, weather information will be extracted from the response and put into a formatted Slack message, which will subsequently be sent back to Slack when calling sendMessage().\nerr = sendMessage(token, channel, weather) if err != nil { fmt.Fprintf(w, \u0026#34;error: %v\u0026#34;, err) } As Slack supports formatting text object, the message can be prettied by using some special symbols such as * (for Bold), _ (for Italic). I even created an emojimap to add some weather emoji icons.\nOur AppWeatherMentionHandler function is now ready to deploy to GCP.\ngcloud functions deploy AppWeatherMentionHandler --runtime go111 --trigger-http\rOnce it is successfully deployed, you can try the bot out on your Slack channel. For instance, if you want to know how the weather at Melbourne, Australia is, you mention your bot like follows.\n@weatherbot Melbourne, Au\rAnd this is what will be displayed in your Slack channel\n  Conclusion Well done! Now you have a working bot handy for checking weather. Follow this link for another amazing bot that allows you to quote stock price.\nReferences  Rapid loop slackbot for RTM API Slack API Slack Event API Google Cloud Platform openweathermap API Create a Slack App Slack Bot users App_mention event GCP cloud function example Current Weather API doc Formatting Text Weather condition Emoji Golang http Markdown Basic writting and formatting on Gibthub Stockbot repository Icons made by Dave Gandyfrom www.flaticon.com  ","href":"/project/weatherbot/","title":"Simple Slack bot in Go using event API - Weather Bot"},{"content":"","href":"/tags/channel/","title":"channel"},{"content":"","href":"/tags/concurrency/","title":"concurrency"},{"content":"Source code\nProblem description There are 5 philosophers having their dinner at a round table with one chopstick between each adjacent pair of philosophers. A philosopher can only eat when they have both left and right chopsticks. In other words, while one philosopher is eating, his two adjacent friends have to wait. After eating he puts both the chopsticks down to let the others eat. There is a limit number of philosophers that can eat concurently. In a larger scale, while there are more than 5 philosopher, this number may differ in range of 1 to as many as possible.\nThe deadlock may occur when each philosopher simultaneously pickups one chopstick and waits for another chopticks forever. A host which executes in its own goroutine is introduced to resolve the deadlock situation. The host plays a role on coordinating the dining process. In order to give a philosopher permission to eat, host needs to check for all the conditions, including whether 2 adjacent of that philosopher are not eating and how many philosophers are eating at that time.\nImplementation Note: This design is scalable, i.e number of philosophers, number of courses per Philosopher, and number philosophers that eat concurrently can be changed.\nconst ( noP = 5 // number of Philosophers  noCoursesPerP = 3 // Number of courses per Philosophers  noPEatAtOneTime = 2 // number of Philosophers eating concurrently ) ","href":"/docs/dining-philosopher/","title":"Dining Philosopher problem in Go"},{"content":"","href":"/tags/example/","title":"example"},{"content":"","href":"/tags/config/","title":"Configuration"},{"content":"","href":"/tags/og/","title":"Opengraph"},{"content":"","href":"/page/","title":"Pages"},{"content":"","href":"/search/","title":"Search"},{"content":"","href":"/series/","title":"Series"}]
