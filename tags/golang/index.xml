<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Tracey Hoang</title>
    <link>http://www.example.com/tags/golang/</link>
    <description>Recent content in golang on Tracey Hoang</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 16 Oct 2020 21:00:00 +1000</lastBuildDate><atom:link href="http://www.example.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About</title>
      <link>http://www.example.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.example.com/about/</guid>
      <description>Hello, I&amp;rsquo;m Tracey. I am a self-taught software engineer with applied mathematics background. After going through A Tour of Go, I found that Go was actually a neat and simple language to learn and started to develop more interest in programming. While still in my learning journey, I create this blog to share interesting problems and projects that I have done in Go, as well as some other useful resources.</description>
    </item>
    
    <item>
      <title>Mira Jump</title>
      <link>http://www.example.com/project/mirajump/</link>
      <pubDate>Fri, 16 Oct 2020 21:00:00 +1000</pubDate>
      
      <guid>http://www.example.com/project/mirajump/</guid>
      <description>Source code
Description This simple game is modified from Flappy Gopher game from Ebiten. It is written in Go using Ebiten library.
Mira is running her scooter. She is going to meet objects on her way, and jumping over them is the only way to go pass. Every time when she successfully avoids an object she will get one point.
How to play Press space key or left-click when you want to jump.</description>
    </item>
    
    <item>
      <title>Simple Slack bot in Go using event API - Stock Bot</title>
      <link>http://www.example.com/project/stockbot/</link>
      <pubDate>Fri, 16 Oct 2020 21:00:00 +1000</pubDate>
      
      <guid>http://www.example.com/project/stockbot/</guid>
      <description>Source code
In this application, we will discuss about stockbot that returns stock prices of a company. The architecture is as follows.
For one who comes to this repository first, I have another repository call weatherbot in which I have described step by step how to build a weatherbot for querying weather conditon of a location. Most of the steps of implementation for two bots are similar, including building a Slack bot user, subscribing to app mentioned event, creating a Go function which is a HTTP handler.</description>
    </item>
    
    <item>
      <title>Simple Slack bot in Go using event API - Weather Bot</title>
      <link>http://www.example.com/project/weatherbot/</link>
      <pubDate>Fri, 16 Oct 2020 20:00:00 +1000</pubDate>
      
      <guid>http://www.example.com/project/weatherbot/</guid>
      <description>Source code
In this repository, I&amp;rsquo;m going to create a weatherbot for querying weather condition of a given location. The idea of writing a Slack bot in Go was inspired by rapidloop&amp;rsquo;s slackbot for RTM API. At the moment, Slack platform provides a range of APIs that Slack apps can access to including events API, web API, Audit Logs APIs beside RTM API which was used in rapidloop&amp;rsquo;s implementation. As RTM API is being phased out in favour of events API, in this application, events API will be used.</description>
    </item>
    
    <item>
      <title>Dining Philosopher problem in Go</title>
      <link>http://www.example.com/docs/dining-philosopher/</link>
      <pubDate>Fri, 16 Oct 2020 14:00:00 +1000</pubDate>
      
      <guid>http://www.example.com/docs/dining-philosopher/</guid>
      <description>Source code
Problem description There are 5 philosophers having their dinner at a round table with one chopstick between each adjacent pair of philosophers. A philosopher can only eat when they have both left and right chopsticks. In other words, while one philosopher is eating, his two adjacent friends have to wait. After eating he puts both the chopsticks down to let the others eat. There is a limit number of philosophers that can eat concurently.</description>
    </item>
    
  </channel>
</rss>
